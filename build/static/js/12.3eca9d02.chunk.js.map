{"version":3,"sources":["store/action/AddData.js","View/assets/images/Office1.jpg","View/Clients/AddJob/AddJobs.js"],"names":["storage","getStorage","AddService","values","RestForm","onCloseModal","file_Url","auth","uid","replace","c","r","Math","random","toString","broofa","docData","title","charges","description","id","type","service_name","name","create_date_time","Date","setDoc","doc","db","then","Swal","fire","icon","catch","AddServices","imageurl","length","metadata","contentType","storageRef","ref","uploadTask","uploadBytesResumable","on","snapshot","progress","bytesTransferred","totalBytes","console","log","error","alert","getDownloadURL","downloadURL","AddJob","jobtype","JobTittle","JobBudget","JobDescribe","AddJobImage","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","primary","main","form","width","submit","AddJobs","value","classes","useNavigate","useAuth","React","useState","Setimageurl","Setjobtype","Link","setValues","getUserDate","event","preventDefault","target","Header","className","style","background","Office","height","opacity","backgroundSize","marginLeft","Container","component","maxWidth","CssBaseline","color","padding","fontSize","letterSpacing","Grid","container","item","xs","sm","TextField","autoComplete","variant","fullWidth","label","onChange","InputLabel","htmlFor","FormControlLabel","control","Checkbox","checked","e","files","accept","multiline","minRows","Button","onClick"],"mappings":"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","file":"static/js/12.3eca9d02.chunk.js","sourcesContent":["import { doc, setDoc, onSnapshot, collection, query, where, updateDoc, getDoc, getDocs, deleteDoc, arrayUnion } from \"firebase/firestore\";\nimport { db } from '../../util/firebase';\nimport Swal from 'sweetalert2'\nimport moment from 'moment';\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n\nconst storage = getStorage();\n\n\nconst AddService = async (values, RestForm, onCloseModal, file_Url, auth) => {\n\n    function broofa() {\n        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    let uid = broofa();\n\n    const docData = {\n        title: values?.title,\n        charges: values?.charges,\n        description: values?.description,\n        id: values?.type?.id,\n        service_name: values?.type?.name,\n        create_date_time: new Date(),\n        file_Url: file_Url,\n        ...auth\n\n    };\n\n    await setDoc(doc(db, \"Services\", uid), docData).then(() => {\n        Swal.fire({\n            title: \"Success fully added\",\n            icon: \"success\",\n            // button: \"Ok\",\n        })\n        RestForm();\n        onCloseModal();\n\n    }).catch(() => {\n        Swal.fire({\n            title: \"Failed To Add\",\n            icon: \"error\",\n            // button: \"Try Again\",\n        })\n    })\n}\n\nconst AddServices = (values, RestForm, onCloseModal, imageurl, auth) => {\n\n    if (values?.title?.length > 0 && values?.charges?.length > 0 && values.description?.length > 0) {\n\n        const metadata = { contentType: imageurl?.type };\n        const storageRef = ref(storage, 'images/' + imageurl.name);\n        const uploadTask = uploadBytesResumable(storageRef, imageurl, metadata);\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n            },\n            (error) => {\n                alert(error)\n            },\n            () => {\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                    console.log('File available at', downloadURL);\n                    AddService(values, RestForm, onCloseModal, downloadURL, auth)\n                });\n            }\n        );\n\n    }\n\n    else {\n        Swal.fire({\n            title: \"Failed To Add 2\",\n            icon: \"error\",\n            // button: \"Try Again\",\n        })\n    }\n\n}\n\nconst AddJob = async (values, RestForm, downloadURL, auth, jobtype) => {\n\n    function broofa() {\n        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    let uid = broofa();\n\n    const docData = {\n        title: values?.JobTittle,\n        charges: values?.JobBudget,\n        description: values?.JobDescribe,\n        jobtype: jobtype,\n        create_date_time: new Date(),\n        file_Url: downloadURL,\n        ...auth\n    };\n\n    await setDoc(doc(db, \"Jobs\", uid), docData).then(() => {\n        Swal.fire({\n            title: \"Success fully added\",\n            icon: \"success\",\n            // button: \"Ok\",\n        })\n        RestForm();\n\n    }).catch(() => {\n        Swal.fire({\n            title: \"Failed To Add\",\n            icon: \"error\",\n            // button: \"Try Again\",\n        })\n    })\n}\n\nconst AddJobImage = (values, RestForm, imageurl, auth, jobtype) => {\n\n    if (values?.JobTittle?.length > 0 && values?.JobBudget?.length > 0 && values.JobDescribe?.length > 0) {\n\n        const metadata = { contentType: imageurl?.type };\n        const storageRef = ref(storage, 'images/' + imageurl.name);\n        const uploadTask = uploadBytesResumable(storageRef, imageurl, metadata);\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                console.log('Upload is ' + progress + '% done');\n            },\n            (error) => {\n                alert(error)\n            },\n            () => {\n                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n                    console.log('File available at', downloadURL);\n                    AddJob(values, RestForm, downloadURL, auth, jobtype)\n                });\n            }\n        );\n\n    }\n\n    else {\n        Swal.fire({\n            title: \"Failed To Add 2\",\n            icon: \"error\",\n            // button: \"Try Again\",\n        })\n    }\n\n}\n\n\n\n\n\n\n\n\nexport {\n    AddServices,\n    AddJobImage\n}","export default __webpack_public_path__ + \"static/media/Office1.6e046e1e.jpg\";","import React from 'react'\nimport Button from \"@material-ui/core/Button\";\nimport Header from \"../../../Components/Header\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { Formik, Form } from \"formik\";\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { useNavigate } from 'react-router-dom'\nimport useAuth from '../../../util/Contex/useAuth';\nimport { AddJobImage } from '../../../store/action/AddData';\nimport Office from '../../assets/images/Office1.jpg';\nimport { positions } from '@mui/system';\nimport { black } from '@tailwindcss/postcss7-compat/colors';\n\nconst useStyles = makeStyles(theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  paper: {\n    marginTop: theme.spacing(0),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nexport default function AddJobs() {\n\n  const classes = useStyles();\n  const navigation = useNavigate();\n  let { auth } = useAuth()\n\n\n  const [imageurl, Setimageurl] = React.useState();\n  const [jobtype, Setjobtype] = React.useState('New Project');\n  const [values, setValues] = React.useState({\n    JobTittle: '',\n    JobBudget: '',\n    Link: '',\n    JobDescribe: '',\n  });\n\n  let name;\n  let value;\n  const getUserDate = (event) => {\n    event.preventDefault()\n    name = event.target.name;\n    value = event.target.value;\n    setValues({ ...values, [name]: value });\n  }\n\n  const RestForm = () => {\n    setValues({\n      JobTittle: '',\n      JobBudget: '',\n      Link: '',\n      JobDescribe: '',\n    })\n  }\n\n\n  return (\n    <>\n   <Header />\n    <div className='container' style={{ background:`url(${Office})`, height:668,opacity:0.9,backgroundSize:\"cover\",width:\"100%\", margin:\"auto\"}}>\n      <div className=\"flex\" style={{ marginLeft: 20, height: 150, }}>\n\n        {/* <img\n          onClick={() => navigation(-1)}\n          loading=\"lazy\"\n          className=\"text-3xl my-20 font-bold rounded float-reght\"\n          src='https://firebasestorage.googleapis.com/v0/b/clancers-inc.appspot.com/o/images%2Fback.png?alt=media&token=6844150b-43c0-43d5-b8f0-80a752d90662' style={{ height: 40, width: 40, marginRight: 40 }} />\n        <h2 className=\"text-3xl my-20 font-bold\">Add Job</h2> */}\n      </div>\n\n\n      <Container style={{backgroundColor:'white',opacity:0.9,marginTop:-50,width:540}} component=\"main\" maxWidth=\"sm\">  \n        <CssBaseline />\n\n        <div className={classes.paper}>\n        <h2 style={{ color:\"black\" ,padding:10, fontSize:\"2.5em\",letterSpacing:\"2px\"}}>Create Job</h2>\n          <Grid style={{marginTop:-30}} container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                variant=\"outlined\"\n                height=\"100px\"\n                fullWidth\n                id=\"JobTittle\"\n                name={'JobTittle'}\n                label=\"Job Title\"\n                onChange={getUserDate}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                onChange={getUserDate}\n                id=\"JobBudget\"\n                label=\"Job Budget\"\n                name=\"JobBudget\"\n                autoComplete=\"lname\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputLabel htmlFor=\"standard-adornment-amount\">Job Type</InputLabel>\n              <FormControlLabel\n                value=\"New Project\"\n                control={<Checkbox checked={jobtype == \"New Project\" ? true : false} onChange={() => {\n                  Setjobtype(\"New Project\")\n                }} />}\n                label=\"New Project\"\n              // labelPlacement=\"New Project\"\n              />\n              <FormControlLabel\n                value=\"Support\"\n                control={<Checkbox checked={jobtype == \"Support\" ? true : false} onChange={() => {\n                  Setjobtype(\"Support\")\n                }} />}\n                label=\"Support\"\n              // labelPlacement=\"Support\"\n              />\n              <FormControlLabel\n                value=\"New Module\"\n                control={<Checkbox checked={jobtype == \"New Module\" ? true : false} onChange={() => {\n                  Setjobtype(\"New Module\")\n                }} />}\n                label=\"New Module\"\n              // labelPlacement=\"New Module\"\n              />\n              <FormControlLabel\n                value=\"Hiring\"\n                control={<Checkbox checked={jobtype == \"Hiring\" ? true : false} onChange={() => {\n                  Setjobtype(\"Hiring\")\n                }} />}\n                label=\"Hiring\"\n              // labelPlacement=\"Hiring\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                name=\"Link\"\n                label=\"Link\"\n                type=\"text\"\n                id=\"Link\"\n                onChange={getUserDate}\n                autoComplete=\"current-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <input\n                type='file'\n                style={{ marginTop: 10 }}\n                onChange={(e) => Setimageurl(e.target.files[0])} accept=\"image/png, image/gif, image/jpeg\"\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n\n              <TextField\n                id=\"filled-multiline-static\"\n                label=\"Job Describration\"\n                onChange={getUserDate}\n                name=\"JobDescribe\"\n                multiline\n                minRows={6}\n                style={{ width: 550 }}\n                variant=\"outlined\"\n              />\n            </Grid>\n\n\n\n          </Grid>\n          <Button\n            fullWidth\n            onClick={() => AddJobImage(values, RestForm, imageurl, auth, jobtype)}\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}>\n            Add Job\n          </Button>\n        </div>\n      </Container>\n    </div></>\n    \n  );\n};"],"sourceRoot":""}